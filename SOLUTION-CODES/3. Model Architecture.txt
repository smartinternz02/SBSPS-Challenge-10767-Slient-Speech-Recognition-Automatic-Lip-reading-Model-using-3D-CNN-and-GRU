import torch.nn.functional as F

class LipReadingModel(nn.Module):
    def __init__(self, num_classes, cnn_3d):
        super(LipReadingModel, self).__init__()
        self.cnn_3d = cnn_3d
        self.gru = nn.GRU(input_size=32 * 8 * 8, hidden_size=256, num_layers=2, batch_first=True)
        self.fc = nn.Linear(256, num_classes)
    
    def forward(self, x):
        x = self.cnn_3d(x)
        x = x.view(x.size(0), -1)  # Flatten 3D CNN output
        x, _ = self.gru(x)
        x = self.fc(x)
        return x

num_classes = len(dataset.classes)
lip_reading_model = LipReadingModel(num_classes, cnn_3d)
